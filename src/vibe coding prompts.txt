# Ты опытный программист на python
Ты на профессиональном уровне знаешь python, natural language processing и large language models, библиотеки streamlit, langchain, docling. При ответе используй лучшие практики написания кода на python, разбей проект на модули, организуй код в классы. При написании функций используй docstring. Обязательно используй логгирование результатов и ошибок в файл. Сообщения об ошибках толжны быть продублированы в интерфейсе пользователю. В критических местах используй обработку исключений.

# Помоги мне написать проектную работу по курсу NLP. 
Тема проектной работы: Автоматизированный анализ условий страхования на базе LLM и LangChain. Язык программирования python. Проект будет запускаться в среде windows 10, python 3.13, в виртуальном окружении.

# Цели проектной работы:
- Автоматизировать анализ и проверку нетиповых условий договора страхования,
- Сократить ручной труд андеррайтера при анализе и проверке нетиповых договоров страхования,
- Сократить количество ошибок (вторая пара глаз), повысить SLA (скорость ответа).

# Выбор проектных решений:
- VSC: Git, linebreaks: windows, IDE: Vscode
- UI на Streamlit
- Вызов LLM через API https://api.vsegpt.ru/v1/chat/completions, совместим с OpenAI API, API_KEY передается через переменную окружения
- Языкова модель: "google/gemini-2.5-flash-pre-05-20". Я выбрал ее, потому что она дешевая и с большим контекстом. правила страхования, договор страхования и промпт занимают много контекста.
- Конвертация из word в markdown с сохранением структуры документа и ссылок внутри документа с помощью библиотеки docling
- Langchain для формирования запроса, отправки и анализа результатов
- для сохранения шаблонов langchain и метаданных о правилах страхования и договорах страхования используется файловая система

# Базовый функционал
Пользователь выбирает режим работы приложения, режимы перечислены в боковой панели:
- загрузка правил страхования
- загрузка договора страхования
- анализ договора страхования
- просмотр истории запросов
Ниже подробное описание режимов работы приложения

## загрузка правил страхования
На основном экране приложения отображается кнопка "Загрузить правила"с кратким пояснением. При нажатии на кнопку пользователь видит диалоговое окно выбора файла, доступные расширения doc, docx и pdf. 
После выбора файла происходит его конвертация в markdown формат с сохранением в каталог data\rules, метаданные в виде хэша, названия файла, даты загрузки, количество символов сохраняются в этот каталог. После сохранения пользователю выводится содержимое сохраненного markdown файла с указанием метаданных, метаданные указываются вначале.

## загрузка договора страхования
На основном экране приложения отображается кнопка "Загрузить договор" с кратким пояснением. При нажатии на кнопку пользователь видит диалоговое окно выбора файла, доступные расширения doc, docx и pdf. 
После выбора файла происходит его конвертация в markdown формат с сохранением в каталог data\policies, метаданные в виде хэша, названия файла, даты загрузки, количество символов сохраняются в этот каталог. После сохранения пользователю выводится содержимое сохраненного markdown файла с указанием метаданных, метаданные указываются вначале.

## анализ договора страхования
Пользователь видит два выпадающих списка: первый содержит название договора страхования, второй список содержит названия загруженных правил страхования. Ниже расположено еще одно поле с шаблоном запроса для langchain, еще ниже текстовое поле с содержанием этого запроса. Пользователь может отредактировать шаблон запроса в этом текстовом поле. Ниже расположена кнопка "Выполнить анализ", после нажатия на которое происходит подстановка в шаблон {contract_text} – текст договора, {rules_text} – текст правил страхования и отправка запроса в LLM через API.
Ниже показывается статус запроса и полный ответ от языковой модели. Результаты запроса вместе с метаданными сохраняются в истории запросов в подкаталоге data\history в отдельном файле. В имени файла истории используется уникальный GUID.
Пользователь может изменить шаблон запроса и повторно отправить запрос. В таком случае результат предыдущего запроса стирается и показывается результат нового запроса.

## просмотр истории запросов
Пользователь види список из запросов. При выборе запроса ниже показывается вся информация о запросе:
- название правил страхования
- название договора страхования
- шаблон запроса
- дата отправки запроса
- ответ модели
- количество токенов, количество символов

# Структура проекта
- файл requirements.txt для установки зависимостей в виртуальное окружение
- файл README.MD для обзора и краткого описания
- каталог src содержит модули python
- каталог data содержит генерируемые программой текстовые файлы 
- подкаталог data\templates содержит шаблоны запросов для langchain в формате txt
- подкаталог data\policies содержит тексты договоров страхования в формате md, а также метаданные (хэши, названия договоров и прочие данные)
- подкаталог data\rules содержит тексты загруженных правил страхования в формате md, а также метаданные (хэши, названия договоров и прочие данные)
- подкаталог data\history содержит историю запросов, а также метаданные (результат, количество букв в запросе). каждый запрос в отдельном файле.
- файл app.py содержит точку входа: код для запуска web интерфейса streamlit
- файл start_app.bat создает виртуальное окружение, устанавливает зависимости и запускает streamlit
- каталог Полис содержит тестовые договоры в формате docx и pdf
- каталог Правила страхования содержит тестовые правила страхования в формате docx и pdf

# Этапы проектирования
1. Ознакомление с проектом, обсуждение проектных решений
2. Создание базовой структуры каталога
3. Создание базового макета приложения на streamlit
4. Создание модуля для загрузки договора страхования
5. Создание модуля для загрузки правил страхования
6. Создания модуля для загрузки шаблонов langchain, отправки запроса к LLM через API и вывода результата пользователю

# Формат ответа
В ответе не пиши сразу код. Давай сначала обсудим, насколько детально описано техническое задание, достаточно ли вводных для создания MVP. Вначале проведи анализ и предложи несколько вариантов улучшения архитектуры и проектных решений, если они возможны. Напиши свое мнение относительно технической части проекта. Не пиши сразу код.