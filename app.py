import streamlit as st
import os
import traceback
from pathlib import Path

from src.logger import logger
from src.loader_policy import PolicyLoader
from src.loader_rules import RulesLoader
from src.analyzer import InsuranceAnalyzer
from src.utils import (
    calculate_file_hash,
    list_documents,
    load_text_file,
    load_template_file,
    list_history_files,
    load_history_file,
    load_metadata_map
)

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è", layout="wide")
st.markdown("# üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")

mode = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
    (
        "üìò –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è",
        "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è",
        "üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞",
        "üïì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
    ),
)


if mode == "üìò –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è":
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (.doc, .docx, .pdf)", type=["doc", "docx", "pdf"])
    if uploaded_file:
        loader = RulesLoader()
        try:
            result = loader.load_file(uploaded_file)
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            st.markdown("### –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            st.json(result["metadata"])
            st.markdown("### Markdown:")
            st.markdown(result["markdown"])
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


elif mode == "üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è":
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (.doc, .docx, .pdf)", type=["doc", "docx", "pdf"])
    if uploaded_file:
        loader = PolicyLoader()
        try:
            result = loader.load_file(uploaded_file)
            st.success("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            st.markdown("### –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
            st.json(result["metadata"])
            st.markdown("### Markdown:")
            st.markdown(result["markdown"])
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


elif mode == "üîç –ê–Ω–∞–ª–∏–∑ –¥–æ–≥–æ–≤–æ—Ä–∞":
    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è -> GUID
    contract_map = load_metadata_map("data/policies")
    rules_map = load_metadata_map("data/rules")

    selected_contract_display = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–≥–æ–≤–æ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è", list(contract_map.keys()))
    selected_rules_display = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è", list(rules_map.keys()))

    if selected_contract_display and selected_rules_display:
        contract_guid = contract_map[selected_contract_display]
        rules_guid = rules_map[selected_rules_display]

        contract_text = load_text_file(Path("data/policies") / f"{contract_guid}.md")
        rules_text = load_text_file(Path("data/rules") / f"{rules_guid}.md")

        template_paths = list(Path("data/templates").glob("*.txt"))
        selected_template = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω", [p.name for p in template_paths])

        template_text = load_template_file(Path("data/templates") / selected_template)
        edited_template = st.text_area("–®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)", value=template_text, height=300)

        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
            try:
                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
                    analyzer = InsuranceAnalyzer()
                    result = analyzer.analyze(
                        contract_text=contract_text,
                        rules_text=rules_text,
                        template_text=edited_template
                    )

                st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω")

                st.markdown("### üìã –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
                st.markdown(result["response"], unsafe_allow_html=True)

                st.markdown("### üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                st.json({
                    "GUID": result["id"],
                    "–î–∞—Ç–∞": result["timestamp"],
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ": result["contract_chars"],
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö": result["rules_chars"],
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ": result["prompt_chars"],
                    "–¢–æ–∫–µ–Ω—ã": result.get("tokens"),
                })

                with st.expander("üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω"):
                    st.code(result["template"], language="jinja")

                with st.expander("üì§ –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ LLM"):
                    st.text_area("–ü—Ä–æ–º–ø—Ç", result["prompt_text"], height=300)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}", exc_info=True)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")




elif mode == "üïì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤":
    st.subheader("üïì –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

    history_files = list_history_files("data/history")
    if not history_files:
        st.info("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    else:
        selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏", history_files)

        if selected_file:
            try:
                history = load_history_file(Path("data/history") / selected_file)

                st.markdown("### üìã –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ (–æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown):")
                st.markdown(history.get("response", ""), unsafe_allow_html=True)

                st.markdown("### üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                st.json({
                    "GUID": history.get("id"),
                    "–î–∞—Ç–∞": history.get("timestamp"),
                    "–¢–æ–∫–µ–Ω—ã": history.get("tokens"),
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ": history.get("contract_chars"),
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö": history.get("rules_chars"),
                    "–°–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ": history.get("prompt_chars"),
                })

                with st.expander("üìÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω"):
                    st.code(history.get("template", ""), language="jinja")

                if "prompt_text" in history:
                    with st.expander("üì§ –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤ LLM"):
                        st.text_area("Prompt", history["prompt_text"], height=300)

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

